このスクリプトは、ディスク I/O 性能のベンチマークを実行し、**I/O スケジューラ**や**リードアヘッドの設定**がディスクのパフォーマンスに与える影響を測定するためのものです。具体的には以下の処理を行います。

---

## **スクリプトの主な目的**
1. **I/O スケジューラの影響を測定**
   - `mq-deadline` と `none` の 2 つの I/O スケジューラでディスクの性能（帯域幅、IOPS、レイテンシ）を測定します。

2. **リードアヘッドの影響を測定**
   - リードアヘッドサイズ（128 KB と 0 KB）の違いが読み取り性能に与える影響を確認します。

3. **ランダム書き込みのパフォーマンス測定**
   - 複数のジョブ数（CPU コア数に応じた並列性）でランダム書き込み性能を測定します。

4. **データを加工**
   - 測定結果を `.txt` ファイルに整形して保存します。

5. **結果のプロット**
   - `plot-block.py` を呼び出して、測定結果をグラフ化します。

---

## **スクリプトが作成するファイル**
スクリプトは、測定結果を JSON ファイルと整形済みのテキストファイルとして保存します。以下は生成されるファイルの種類です。

### **1. fio の測定結果ファイル**
- **形式**: JSON ファイル
- **内容**: fio のベンチマーク結果（帯域幅、IOPS、レイテンシ）
- **命名規則**:
  - `read-mq-deadline-128.json`（リードアヘッド 128KB, スケジューラ `mq-deadline`, リード測定）
  - `randwrite-none-2.json`（スケジューラ `none`, ランダム書き込み, ジョブ数 2）

### **2. 抽出されたデータファイル**
- **形式**: テキストファイル
- **内容**: fio 測定結果から抽出されたデータ（帯域幅、IOPS、レイテンシ）
- **命名規則**:
  - `read-mq-deadline-128.txt`（上記 JSON ファイルの抽出データ）
  - `randwrite-none-2.txt`（ランダム書き込みの抽出データ）

### **3. 整形済みの集約ファイル**
- **形式**: テキストファイル
- **内容**: 各設定（スケジューラ、リードアヘッドサイズ、ジョブ数）ごとにまとめられたデータ
- **命名規則**:
  - `read.txt`（リード性能の結果集約）
  - `randwrite-mq-deadline.txt`（ランダム書き込み性能の結果集約）

---

## **スクリプトの処理フロー**

### **1. 設定ファイルの読み込み**
- スクリプトは、設定ファイルから以下の情報を取得します:
  - **`DEVICE_NAME`**: テスト対象のディスクデバイス名（例: `sda`）
  - **`PART_NAME`**: テスト対象のディスクパーティション名（例: `sda1`）
  - **`DATA_DIR`**: ベンチマーク用の一時ファイルを保存するディレクトリ
  - **`TYPE`**: デバイスの種類（例: `HDD` または `SSD`）

### **2. 必要なファイルやディレクトリの準備**
- **一時ファイル作成**:
  - `DATA_FILE`（データファイル、サイズは 128MB）
- **作業ディレクトリ作成**:
  - `mkdir -p ${TYPE}`

### **3. リードアヘッドの効果測定**
- I/O スケジューラ（`mq-deadline`, `none`）とリードアヘッドサイズ（128 KB, 0 KB）の組み合わせで、fio を使用して読み取り性能を測定します。
- JSON ファイルに結果を保存し、抽出データを `.txt` ファイルに保存します。

### **4. ランダム書き込みの効果測定**
- I/O スケジューラ（`mq-deadline`, `none`）とジョブ数（1 ～ CPU コア数）の組み合わせで、fio を使用してランダム書き込み性能を測定します。
- JSON ファイルに結果を保存し、抽出データを `.txt` ファイルに保存します。

### **5. データの集約**
- 各設定の測定結果をまとめ、集約ファイル（例: `read.txt`, `randwrite-mq-deadline.txt`）として保存します。

### **6. グラフの生成**
- Python スクリプト `plot-block.py` を呼び出して、測定結果を可視化します。

---

## **生成されるファイルの例**
以下は、`TYPE=HDD` の場合の出力ファイル構成の例です：

```plaintext
HDD/
├── read-mq-deadline-128.json  # mq-deadline, 128KBリードアヘッド
├── read-mq-deadline-0.json    # mq-deadline, 0KBリードアヘッド
├── read-none-128.json         # none, 128KBリードアヘッド
├── read-none-0.json           # none, 0KBリードアヘッド
├── read-mq-deadline-128.txt   # 抽出データ (mq-deadline, 128KB)
├── read-mq-deadline-0.txt     # 抽出データ (mq-deadline, 0KB)
├── read.txt                   # リード結果の集約
├── randwrite-mq-deadline-1.json
├── randwrite-mq-deadline-2.json
├── randwrite-none-1.json
├── randwrite-none-2.json
├── randwrite-mq-deadline.txt  # ランダム書き込み結果の集約 (mq-deadline)
├── randwrite-none.txt         # ランダム書き込み結果の集約 (none)
└── plot-block.png             # グラフ (Pythonスクリプトの結果)
```

---

## **補足**
スクリプトの動作結果として、測定データは `JSON` ファイルに保存され、それを基にテキストデータやグラフが生成されます。これにより、I/O スケジューラやリードアヘッドの設定がディスク性能に与える影響を詳細に分析することが可能です。
